import java.util.*;

class Node{
    public int data;
    public Node left;
    public Node right;

    Node(int data){
        this.data = data;
        this.left = this.right = null;
    }
}

class BinaryTree{
    Node root;

    public BinaryTree(){
        root = null;
    }

    public Node getRoot(){
        return root;
    }


    // ITERATIVE ADDITION OF NODES
    public void addNodeIteratively(int data) {
        Node newNode = new Node(data);
        if (root == null) {
            root = newNode;
        }
        else {
            Node current = root;
            while (true) {
                if (data < current.data) {
                    if (current.left == null) { 			    
                        current.left = newNode; 
                        return; 
                    } 
                    current = current.left; 
                }
                else {
                    if(current.right == null){  
                        current.right =newNode;
                        return;
                    }
                    current = current.right; 
                }
            } 
        }
    }
    // RECURSIVE ADDITION OF NODES
     public void addNodeRecursively(Node newNode, Node root) {
        if (root == null) {
            root = newNode;
        }
        else if (newNode.data < root.data) {
            root = root.left; 
            addNodeRecursively(newNode, root);
        }
        else if (newNode.data > root.data) {
            root= root.right;
            addNodeRecursively(newNode, root);;
        }
     }

    public void delete(int key) {
        root = deleteNode(root, key);
    }
    public Node deleteNode(Node root, int key) {
        if (root == null){
            return root;
        }
        if (root.data > key) {
            root.left = deleteNode(root.left, key);
        }
        else if (root.data < key) {
            root.right = deleteNode(root.right, key);
        }
        else {
            if (root.right == null)
                return root.left;
            else if (root.left == null)
                return root.right;
            Node current = root;
            while (current.left != null) {
                    current = current.left;
                }
            root.data = current.data;
            root.right = deleteNode(root.right, key);
        }
        return root;
    }
//    Hint: use a queue
    public void levelOrderPrint(Node root) {
        if (root == null) {
            System.out.println("List is empty!");
        }
        Queue<Node> list = new LinkedList<>();
        list.add(root);
        list.add(null);

        while(!list.isEmpty()) {
            Node current = list.poll();
            if (current == null) {
                if (!list.isEmpty()) {
                  list.add(null);
                  System.out.println();
                }
            }
            else {
                if (current.left != null)
                    list.add(current.left);
                if (current.right != null)
                    list.add(current.right);
                System.out.print(current.data + " ");
            }
        }
    }

    //Height of the Tree
    public int height(Node root) {
        if (root == null) 
            return 0;
        else {
            int leftbranch = height(root.left);
            int rightbranch = height(root.right);

            if (leftbranch > rightbranch)
                return leftbranch + 1;
            else 
                return rightbranch + 1;
        }
    }
}
public class BinaryTreeImplementation{
    public static void main(String[] args){

        int[] nodes = {13, 4, 9, 6, 23, 27, 21, 22, 15, 3, 2, 7};
        BinaryTree bst = new BinaryTree();


        for(int i=0; i<nodes.length; i++) {
            bst.addNodeIteratively(nodes[i]);
            // bst.addNode(new Node(x[i]),bst.getRoot());
        }

        /*
                     13
                   /    \
                  4       23
                 / \    /    \
                3   9  21    27
               /   /  / \
              2   6  15  22
                   \
                    7
        */

        System.out.println();
        System.out.println("::__Level Order Traversal__::");
        bst.levelOrderPrint(bst.getRoot());
        System.out.println();


        // Delete 7
        bst.delete(7);


        /*
                     13
                   /    \
                  4       23
                 / \    /    \
                3   9  21    27
               /   /  / \
              2   6  15  22

        Inorder : 2 3 4 6 9 13 15 21 22 23 27
        */

        // Delete 3
        bst.delete(3);

        /*
                     13
                   /    \
                  4       23
                 / \    /    \
                2   9  21    27
                   /  / \
                  6  15  22

        Inorder : 2 4 6 9 13 15 21 22 23 27
        */

        // Delete 4
        bst.delete(4);

        /*
                     13
                   /    \
                  6       23
                 / \    /    \
                2   9  21    27
                      / \
                     15  22

        Inorder : 2 6 9 13 15 21 22 23 27
        */

        // Delete 23 
        bst.delete(23);

        /*
                     13
                   /    \
                  6      27
                 / \    /   
                2   9  21   
                      / \
                     15  22

        Inorder : 2 6 9 13 15 21 22 27
        */

        // Delete 13 
        bst.delete(13);

        /*
                     15
                   /    \
                  6      27
                 / \    /   
                2   9  21   
                        \
                        22

        Inorder : 2 6 9 15 21 22 27
        */

    }
}
